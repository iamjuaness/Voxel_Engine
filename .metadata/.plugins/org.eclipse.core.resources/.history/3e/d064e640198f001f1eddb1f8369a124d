package juancraft;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.opengl.Display;
import org.lwjgl.util.vector.Vector3f;

import entities.Camera;
import entities.Entity;
import models.RawModel;
import models.TexturedModel;
import render_engine.DisplayManager;
import render_engine.Loader;
import render_engine.MasterRenderer;
import shaders.StaticShader;
import textures.Modeltexture;

/**
 * The MainGameLoop class is the entry point of the JuanCraft game application.
 * It initializes the display, prepares the rendering engine, and enters the
 * main game loop where rendering occurs until the display is closed.
 */
public class MainGameLoop {

    // Static references for loader and shader for use throughout the application.
    public static Loader loader1 = null;
    public static StaticShader shader1 = null;
    
    static List<Entity> entities = new ArrayList<Entity>();
    static Vector3f camPos = new Vector3f(0, 0, 0);

    /**
     * The main method that starts the game. It initializes the display, creates a
     * MasterRenderer for rendering, and enters the game loop.
     * 
     * @param args Command line arguments (not used in this application).
     */
    public static void main(String[] args) {
        // Create and initialize the display window for the game.
        DisplayManager.createDisplay();

        // Create a Loader instance for loading models and shaders.
        Loader loader = new Loader();
        loader1 = loader; // Store the loader instance for potential future use.
        StaticShader shader = new StaticShader();
        shader1 = shader; // Store the shader instance for potential future use.

        // Instantiate the MasterRenderer to handle rendering operations.
        MasterRenderer renderer = new MasterRenderer(shader1);

        // Define vertices for a simple square model.
        float[] vertices = { 
            -0.5f, 0.5f, -0.5f,	
            -0.5f, -0.5f, -0.5f,	
            0.5f, -0.5f, -0.5f,	
            0.5f, 0.5f, -0.5f,
            -0.5f, 0.5f, 0.5f,	
            -0.5f, -0.5f, 0.5f,	
            0.5f, -0.5f, 0.5f,	
            0.5f, 0.5f, 0.5f,
            0.5f, 0.5f, -0.5f,	
            0.5f, -0.5f, -0.5f,	
            0.5f, -0.5f, 0.5f,	
            0.5f, 0.5f, 0.5f,
            -0.5f, 0.5f, -0.5f,	
            -0.5f, -0.5f, -0.5f,	
            -0.5f, -0.5f, 0.5f,	
            -0.5f, 0.5f, 0.5f,
            -0.5f, 0.5f, 0.5f,
            -0.5f, 0.5f, -0.5f,
            0.5f, 0.5f, -0.5f,
            0.5f, 0.5f, 0.5f,
            -0.5f, -0.5f, 0.5f,
            -0.5f, -0.5f, -0.5f,
            0.5f, -0.5f, -0.5f,
            0.5f, -0.5f, 0.5f
        };

        // Define indices for the square's two triangles.
        int[] indices = { 
            0, 1, 3,	
            3, 1, 2,	
            4, 5, 7,
            7, 5, 6,
            8, 9, 11,
            11, 9, 10,
            12, 13, 15,
            15, 13, 14,	
            16, 17, 19,
            19, 17, 18,
            20, 21, 23,
            23, 21, 22
        };

        // Define texture coordinates (UV mapping) for the vertices.
        float[] uv = { 
            0, 0,
            0, 1,
            1, 1,
            1, 0,			
            0, 0,
            0, 1,
            1, 1,
            1, 0,			
            0, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 1,
            1, 0
        };

        // Load the vertices, indices, and UV coordinates into a RawModel.
        RawModel model = loader.loadToVao(vertices, indices, uv);

        // Load a texture from the specified file and create a Modeltexture object.
        Modeltexture texture = new Modeltexture(loader.loadTexture("dirtTex"));

        // Create a TexturedModel object using the loaded texture and the 3D model.
        TexturedModel texturedModel = new TexturedModel(model, texture);

        for (int x = camPos.x -10; x camPos.x + 10; x++) {
        	for(int z = -10; z < 10; z++) {
        		entities.add(new Entity(texturedModel, new Vector3f(x, 0, z), 0, 0, 0, 1));
        	}
        }

        // Create a Camera object positioned at the origin with no rotation.
        Camera camera = new Camera(new Vector3f(0, 0, 0), 0, 0, 0);

        // Main game loop, which runs continuously until the display requests to close.
        while (!Display.isCloseRequested()) {
            // Prepare the rendering for the current frame (e.g., clear the screen).
            renderer.prepare();
            
            // Call the move method of the camera to update its position based on input.
            camera.move(); // Update camera position based on user input
            
            camPos = camera.getPosition();

            // Start using the shader program for rendering the entities.
            shader.start();
            
            // Load the camera view matrix into the shader.
            shader.loadViewMatrix(camera);
            
            for (Entity entity : entities) {
            	renderer.render(entity, shader);
            }

            // Stop using the shader after rendering.
            shader.stop();

            // Update the display (sync frame rate and render new frame).
            DisplayManager.updateDisplay();
        }

        // Close the display and clean up resources when the loop exits.
        DisplayManager.closeDisplay();
    }
}
