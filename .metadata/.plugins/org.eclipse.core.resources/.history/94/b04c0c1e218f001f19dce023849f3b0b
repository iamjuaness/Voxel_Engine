package juancraft;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.lwjgl.opengl.Display;
import org.lwjgl.util.vector.Vector3f;

import entities.Camera;
import entities.Entity;
import models.RawModel;
import models.TexturedModel;
import render_engine.DisplayManager;
import render_engine.Loader;
import render_engine.MasterRenderer;
import shaders.StaticShader;
import textures.Modeltexture;

/**
 * The MainGameLoop class is the entry point of the JuanCraft game application.
 * It initializes the display, prepares the rendering engine, and enters the
 * main game loop where rendering occurs until the display is closed.
 */
public class MainGameLoop {

    // Static references for loader and shader for use throughout the application.
    public static Loader loader1 = null;
    public static StaticShader shader1 = null;
    
    // List of entities to be rendered in the game world.
    static List<Entity> entities = Collections.synchronizedList(new ArrayList<Entity>());
    
    // Vector representing the position of the camera.
    static Vector3f camPos = new Vector3f(0, 0, 0);
    
    // List of positions that have been used for placing entities to avoid duplication.
    static List<Vector3f> usedPos = new ArrayList<Vector3f>();
    
    // Defines the size of the world (distance from the camera in each direction).
    static final int WORLD_SIZE = 15;

    /**
     * The main method that starts the game. It initializes the display, creates a
     * MasterRenderer for rendering, and enters the game loop.
     * 
     * @param args Command line arguments (not used in this application).
     */
    public static void main(String[] args) {
        // Create and initialize the display window for the game.
        DisplayManager.createDisplay();

        // Create a Loader instance for loading models and shaders.
        Loader loader = new Loader();
        loader1 = loader; // Store the loader instance for potential future use.
        StaticShader shader = new StaticShader();
        shader1 = shader; // Store the shader instance for potential future use.

        // Instantiate the MasterRenderer to handle rendering operations.
        MasterRenderer renderer = new MasterRenderer(shader1);

        // Define vertices for a simple square model.
        float[] vertices = { 
            -0.5f, 0.5f, -0.5f,	
            -0.5f, -0.5f, -0.5f,	
            0.5f, -0.5f, -0.5f,	
            0.5f, 0.5f, -0.5f,
            -0.5f, 0.5f, 0.5f,	
            -0.5f, -0.5f, 0.5f,	
            0.5f, -0.5f, 0.5f,	
            0.5f, 0.5f, 0.5f,
            0.5f, 0.5f, -0.5f,	
            0.5f, -0.5f, -0.5f,	
            0.5f, -0.5f, 0.5f,	
            0.5f, 0.5f, 0.5f,
            -0.5f, 0.5f, -0.5f,	
            -0.5f, -0.5f, -0.5f,	
            -0.5f, -0.5f, 0.5f,	
            -0.5f, 0.5f, 0.5f,
            -0.5f, 0.5f, 0.5f,
            -0.5f, 0.5f, -0.5f,
            0.5f, 0.5f, -0.5f,
            0.5f, 0.5f, 0.5f,
            -0.5f, -0.5f, 0.5f,
            -0.5f, -0.5f, -0.5f,
            0.5f, -0.5f, -0.5f,
            0.5f, -0.5f, 0.5f
        };

        // Define indices for the square's two triangles.
        int[] indices = { 
            0, 1, 3,	
            3, 1, 2,	
            4, 5, 7,
            7, 5, 6,
            8, 9, 11,
            11, 9, 10,
            12, 13, 15,
            15, 13, 14,	
            16, 17, 19,
            19, 17, 18,
            20, 21, 23,
            23, 21, 22
        };

        // Define texture coordinates (UV mapping) for the vertices.
        float[] uv = { 
            0, 0,
            0, 1,
            1, 1,
            1, 0,			
            0, 0,
            0, 1,
            1, 1,
            1, 0,			
            0, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 1,
            1, 0
        };

        // Load the vertices, indices, and UV coordinates into a RawModel.
        RawModel model = loader.loadToVao(vertices, indices, uv);

        // Load a texture from the specified file and create a Modeltexture object.
        Modeltexture texture = new Modeltexture(loader.loadTexture("dirtTex"));

        // Create a TexturedModel object using the loaded texture and the 3D model.
        TexturedModel texturedModel = new TexturedModel(model, texture);

        // Create a Camera object positioned at the origin with no rotation.
        Camera camera = new Camera(new Vector3f(0, 0, 0), 0, 0, 0);
        
        // Start thread for adding entities in positive X and positive Z directions.
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(!Display.isCloseRequested()) {
                    // Add entities in a grid pattern around the camera.
                    for (int x = (int) (camPos.x); x < camPos.x + WORLD_SIZE; x++) {
                        for (int z = (int) (camPos.z); z < camPos.z + WORLD_SIZE; z++) {
                            // Avoid adding entities at used positions.
                            if (!usedPos.contains(new Vector3f(x, 0, z))) {
                                entities.add(new Entity(texturedModel, new Vector3f(x, 0, z), 0, 0, 0, 1));
                                usedPos.add(new Vector3f(x, 0, z));
                            }
                        }
                    }
                }
            }
        }).start();

        // Start thread for adding entities in negative X and negative Z directions.
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(!Display.isCloseRequested()) {
                    for (int x = (int) (camPos.x - WORLD_SIZE); x < camPos.x; x++) {
                        for (int z = (int) (camPos.z - WORLD_SIZE); z < camPos.z; z++) {
                            if (!usedPos.contains(new Vector3f(x, 0, z))) {
                                entities.add(new Entity(texturedModel, new Vector3f(x, 0, z), 0, 0, 0, 1));
                                usedPos.add(new Vector3f(x, 0, z));
                            }
                        }
                    }
                }
            }
        }).start();

        // Start thread for removing entities that are far from the camera.
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(!Display.isCloseRequested()) {
                    for (int i = 0; i < entities.size(); i++) {
                        int distX = (int) Math.abs(camPos.x - entities.get(i).getPosition().x);
                        int distZ = (int) Math.abs(camPos.z - entities.get(i).getPosition().z);

                        // Remove entities that are outside the WORLD_SIZE range.
                        if (distX > WORLD_SIZE || distZ > WORLD_SIZE) {
                            usedPos.remove(entities.get(i).getPosition());
                            entities.remove(i);
                        }
                    }
                }
            }
        }).start();

        // Main game loop, which runs continuously until the display requests to close.
        while (!Display.isCloseRequested()) {
            // Prepare the rendering for the current frame (e.g., clear the screen).
            renderer.prepare();
            
            // Update the camera's position and orientation.
            camera.move();
            
            // Render each entity in the game world.
            for (Entity entity : entities) {
                renderer.render(entity, shader));
            }
            
            // Update the display with the newly rendered frame.
            DisplayManager.updateDisplay();
            
            // Update the camera's position.
            camPos = camera.getPosition();
        }
        shader.cleanUp();
        loader.cleanUp();
        DisplayManager.closeDisplay();
    }
}
